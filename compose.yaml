# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.7'
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - 8000:8000
    depends_on:
      - db
      - redis
    volumes:
      - cache-volume:/cache/server
    environment:
      - DATABASE_URL=postgresql:///flaskr
      - REDISCLOUD_URL=redis://localhost
      - SECRET_KEY=devnotcompletelyrandomsecretkey
      - TRANSFORMERS_CACHE=/cache/server
      - HF_HOME=/cache/server

  worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    volumes:
      - cache-volume:/cache/worker
    environment:
      - DATABASE_URL=postgresql:///flaskr
      - REDISCLOUD_URL=redis://localhost
      - SECRET_KEY=devnotcompletelyrandomsecretkey
      - CELERY_BROKER_URL=redis://redis
      - CELERY_RESULT_BACKEND=redis://redis
      - CELERY_TASK_IGNORE_RESULT=true
      - TRANSFORMERS_CACHE=/cache/worker
      - HF_HOME=/cache/worker

    depends_on:
      - redis
  monitor:
    build:
      context: .
      dockerfile: Dockerfile.celery
    image: celery/flower
    ports:
      - "5001:5555"
    command: celery -A make_celery flower --port=5555
    volumes:
      - cache-volume:/cache/monitor
    environment:
      - DATABASE_URL=postgresql:///flaskr
      - REDISCLOUD_URL=redis://localhost
      - SECRET_KEY=devnotcompletelyrandomsecretkey
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_TASK_IGNORE_RESULT=true
      - TRANSFORMERS_CACHE=/cache/monitor
      - HF_HOME=/cache/monitor

    depends_on:
      - redis
      - worker
  redis:
    image: redis
    ports:
      - "6379:6379"
  db:
    image: postgres
    restart: always
    user: postgres
    environment:
      - POSTGRES_DB=flaskr
      - POSTGRES_PASSWORD=devnotcompletelyrandomsecretkey
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
  cache-volume:  



# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

